#!/usr/bin/env python

#
# glimpse
#
# Extract JIRA status to generate template report
#

from __future__ import print_function

import argparse
import datetime
from itertools import chain
from jira.client import JIRA
import iso8601
import keyring
import re
import textwrap
import subprocess
import sys

server = 'https://projects.linaro.org'
username = 'daniel.thompson@linaro.org'

class Error(Exception):
	'''Application Specific Error type. It is only sub-classed to
	make it easier to spot; it adds not functionality versus the
	parent.

	'''
	pass

class UTC(datetime.tzinfo):
    ZERO = datetime.timedelta(0)

    def utcoffset(self, dt):
	return self.ZERO

    def tzname(self, dt):
        return "UTC"

    def dst(self, dt):
        return self.ZERO

utc = UTC()

#
# Collection of find/replace strings to massage a summary for
#  readability.
#
# Ideally all we would do with hacks is strip our redundant idioms
# such as including the issuetype in the summary.
#
# However for now we go a bit deeper and try to remove other
# redundant information from the summary (such as member name) or
# excessive use of verbs.
#
hacks = (
	('WIFI', 'WiFi'),
	('wifi', 'WiFi'),
)

component_aliases = {
	'Android-upstreaming' : 'Linaro'
}

displayname_aliases = {
	'Esla.Anzaku@linaro.org' : 'Elsa'
}

# When a card has more than one component we will remove these labels
# *in order* until there is only one component to use as a sub-title.
component_purge = (
	'Engineering works', 'Linaro', 'BSP Analysis', 'Upstream Consultancy', 'Member Build', 'LAVA', 'Training', '96Boards'
)

component_categories = (
	'BSP Analysis', 'Engineering works', 'Member Build', 'LAVA', 'Training', '96Boards', 'Upstream Consultancy', 'Linaro'
)

def warn(issue, msg):
	lines = textwrap.wrap('{} {}'.format(issue.url, msg),
			initial_indent=   'WARNING: ',
			subsequent_indent='         ')
	print('\n'.join(lines), file=sys.stderr)

class Issue(object):
	re_ymd = re.compile('(20[0-9][0-9]).?([0-9][0-9]).?([0-9][0-9])')
	re_progress = re.compile('^(h[123456]\.|#+)?\s*[Pp]rogress')
	re_plans = re.compile('^(h[123456]\.|#+)?\s*[Pp]lans?')
	re_split_worklog = re.compile('\n+ *[*+-]  *|^ *[*+-]  *|\n\n+')

	def __init__(self, issue, jira):
		self._raw = issue

		summary = issue.fields.summary
		for (old, new) in hacks:
			summary = summary.replace(old, new)
		self.summary = summary.strip()

		if issue.fields.assignee:
			displayname = issue.fields.assignee.displayName
			if displayname in displayname_aliases:
				displayname = displayname_aliases[displayname]
			self.assignees = set((displayname,))
		else:
			self.assignees = set(("Noone",))
		self.fields = issue.fields
		self.engineering_status = issue.fields.customfield_10022
		self.key = issue.key
		if self.is_story():
			# Canonical form for customfield_10005: u'PS-63'
			self.parent = issue.fields.customfield_10005
		elif self.is_subtask():
			# Canonical form for parent: <JIRA Issue: key=u'KWG-56', id=u'13944'>
			self.parent = issue.fields.parent.key
		self.url = 'https://projects.linaro.org/browse/' + issue.key

		self._parse_worklog(jira)
	
	def _parse_worklog(self, jira):
		self.worklog = []

		for id in jira.worklogs(self.key):
			self.worklog.append(jira.worklog(self.key, id))

		# Parse into progress and plans (and automatically un-bullet)
		for log in self.worklog:
			log.progress = []
			log.plans = []
			active = log.progress

			comment = log.comment.replace('\r', '')

			for ln in re.split(self.re_split_worklog, log.comment.replace('\r', '')):
				ln = ln.replace('\n', ' ').strip()
				if re.match(self.re_progress, ln):
					continue
				if re.match(self.re_plans, ln):
					active = log.plans
					continue
				active.append(ln)

	def is_story(self):
		return self.fields.issuetype.name == 'Story'

	def is_subtask(self):
		'''A sub-task is similar to a blueprint but has a proper
		parent-child relationship with the engineering card.
		'''
		return self.fields.issuetype.name == 'Sub-task'

	def is_epic(self):
		return self.fields.issuetype.name == 'Epic'

	def categorize(self):
		lookup = {
			'Open': (),
			'TODO': ('Plan',),
			'In Progress' : ('Plan', 'Progress'),
			'Resolved' : ('Progress',),
			'Closed' : ('Progress',),
		}

		if self.fields.status.name in lookup:
			return set(lookup[self.fields.status.name])

		warn(self, 'has bad status ({})'.format(self.fields.status.name))
		return set()

	def get_component(self):
		components = []
		for c in self._raw.fields.components:
			name = c.name
			if name in component_aliases:
				name = component_aliases[name]
			components.append(name)
		for p in component_categories:
			if p in components:
				return p

		warn(self, 'does not match the component categories')
		return ''

	def get_member(self):
		components = []
		for c in self._raw.fields.components:
			name = c.name
			if name in component_aliases:
				name = component_aliases[name]
			components.append(name)
		for p in component_categories:
			if len(components) < 2:
				break
			if p in components:
				components.remove(p)

		if len(components) == 0:
			warn(self, 'has no member')
		elif len(components) >= 2:
			warn(self, 'has too many members '+
					'(incomplete category list?)')
		else:
			return components[0]
		return ''

	def get_assignees(self):
		msg = ""
		for a in sorted(self.assignees):
			msg += ", {}".format(a.partition(' ')[0])
		return msg.lstrip(', ')

	def get_summary(self, member):
		return '{}: {} [{}] ({})'.format(member, self.summary, 
				self.get_assignees(), self.key)

	def get_worklog(self, jira, age=None, recurse=False):
		logs = list(self.worklog)
		if recurse and self.is_epic():
			for bp in self.blueprints:
				logs += bp.worklog

		# Filter by date if requested
		if age:
			logs = [g for g in logs
				if iso8601.parse_date(g.started) >= age[0] and
				   iso8601.parse_date(g.started) <= age[1]]

		# Return work log in time sorted order
		return sorted(logs, key=lambda g: g.started)

class Report(object):
	wrappers = (
		textwrap.TextWrapper(),
		textwrap.TextWrapper(initial_indent=' * ', subsequent_indent='   '),
		textwrap.TextWrapper(initial_indent='   - ', subsequent_indent='     ')
	)

	def __init__(self, jira, issues=None):
		self.jira = jira
		self.issues = {}
		self.cards = {}
		self.blueprints = {}
		self.members = {}

		if issues:
			for id in issues:
				self.add(jira.issue(id))
			self.link_blueprints()

	def add(self, raw):
		issue = Issue(raw, self.jira)
		self.issues[issue.key] = issue

		if issue.is_story() or issue.is_subtask():
			self.blueprints[issue.key] = issue
		elif issue.is_epic():
			self.cards[issue.key] = issue

			components = []
			for c in issue.fields.components:
				name = c.name
				if name in component_aliases:
					name = component_aliases[name]
				components.append(name)
			for p in component_purge:
				if len(components) < 2:
					break
				if p in components:
					components.remove(p)

			if len(components) == 0:
				warn(issue, 'has no component')
			elif len(components) >= 2:
				warn(issue, 'has too many components '+
						'(incomplete purge list?)')
			for name in components:
				if name not in self.members:
					self.members[name] = []
				self.members[name].append(issue)
			issue.blueprints = []
		else:
			warn(issue, 'has unexpected issuetype {}'.format(
				issue.fields.issuetype.name))
	
	def link_blueprints(self):
		'''Iterate over the blueprints and link them to their cards.'''
		for b in self.blueprints.itervalues():
			if not b.parent:
				warn(b, 'is not linked to an EPIC')
				continue
			if b.parent not in self.cards:
				warn(b, 'is linked to a closed card {}'.format(b.parent))
				self.add(self.jira.issue(b.parent))
				if b.parent not in self.cards:
					warn(b, 'is linked to non-existant {}'.format(b.parent))
					continue
	
			card = self.cards[b.parent]
			card.assignees |= b.assignees
			card.blueprints.append(b)
	
	@staticmethod
	def print(msg, level=0):
		print('\n'.join(Report.wrappers[level].wrap(msg)))

def connect_to_jira():
	'''Connect to the server using a password from the keyring.'''

	# To store the password, run this from an interactive python session
	# import keyring; keyring.set_password(server, username, "mysecret")
	password = keyring.get_password(server, username)

	return JIRA(options={'server': server}, basic_auth=(username, password))

def parse_constraint(args):
	'''Generate any additional query constraints'''
	if len(args) == 0:
		return ''
	constraint = 'AND ({})'.format(' '.join(args))

	# We employ special handling on the constraint to ensure that the @
	# symbol is always escaped. @ is a reserved JQL character so cannot
	# appear in raw form outside of a string and JQL strings are complex to
	# pass from the command line. This prevents some contraints from being
	# applied but makes is easy to pass e-mail address from the shell.
	return constraint.replace('@', '\\u0040')

def parse_date(s, end_of_day=False):
	'''Convert a string to a datetime object.

	Operates by calling out to date (because it has a good relative date
	parser).

	'''
	date = subprocess.check_output(["date", "-d", s, "+%Y-%m-%d %H:%M:%S"])
	date = date.rstrip()
	date = datetime.datetime.strptime(date, "%Y-%m-%d %H:%M:%S")

	# TODO: We might jump about a few hours here (date has not been
	#       told to give back values in UTC
	date = date.replace(tzinfo=utc)

	if end_of_day and date.hour == 0 and date.minute == 0 and date.second == 0:
		date += datetime.timedelta(hours=23, minutes=59, seconds=59)

	return date.replace(tzinfo=utc)

def do_weekly(args):
	query = 'project = "Premium Services Engineering"'
	query += ' AND (statusCategory != Complete OR updatedDate >= "{}")'.format(
			args.since.strftime("%Y/%m/%d %H:%M"))
	query += args.constraint

	jira = connect_to_jira()
	report = Report(jira, jira.search_issues(query))

	report.print('## Progress')
	for member in sorted(report.members.iterkeys()):
		for card in sorted(report.members[member], key=lambda x: x.key):
			report.print('\n')
			report.print(card.get_summary(member), level=1)
			for log in card.get_worklog(
					jira, age=(args.since, args.until),
					recurse=True):
				for bullet in log.progress:
					report.print(bullet, level=2)

	report.print('')
	report.print('## Plans')

	for member in sorted(report.members.iterkeys()):
		for card in sorted(report.members[member], key=lambda x: x.key):
			report.print('\n')
			report.print(card.get_summary(member), level=1)
			for log in card.get_worklog(
					jira, age=(args.since, args.until),
					recurse=True):
				for bullet in log.plans:
					report.print(bullet, level=2)

def do_monthly(args):
	do_weekly(args)

def do_worklog(args):
	date_range = (parse_date(args.since),
		      parse_date(args.until, end_of_day=True))

	query = 'project = "Premium Services Engineering"'
	query += ' AND updatedDate >= "{}"'.format(
			date_range[0].strftime("%Y/%m/%d %H:%M"))
	query += args.constraint

	jira = connect_to_jira()
	report = Report(jira, jira.search_issues(query))

	def csv(card, epic):
		for worklog in card.worklog:
			print('"{}","{}","{}","{}","{}","{}","{}","{}"'.format(
				card.key, card.summary, epic.key,
				card.get_member(), card.get_component(),
				worklog.started, worklog.timeSpentSeconds,
				worklog.author.displayName))

	for member in sorted(report.members.iterkeys()):
		for epic in sorted(report.members[member], key=lambda x: x.key):
			csv(epic, epic)
			for story in epic.blueprints:
				csv(story, epic)

def main(argv):
	parser = argparse.ArgumentParser()
	subparsers = parser.add_subparsers()

	# create the parser for the "weekly" command
	s = subparsers.add_parser("weekly",
			help="Generate a (template) weekly report")
	s.add_argument("--since", default="next-friday -1 weeks -4 days",
			help="When to gather information from")
	s.add_argument("--until", default="tomorrow",
			help="When to stop gathering information")
	s.add_argument("constraint", nargs="*",
			help="Any additional JQL contraints")
	s.set_defaults(func=do_weekly)

	# create the parser for the "monthly" command
	s = subparsers.add_parser("monthly",
			help="Generate a (template) monthly report")
	s.add_argument("--since", default="last month -{} days 00:00:00".format(
					datetime.date.today().day - 1),
			help="When to gather information from")
	s.add_argument("--until", default="-{} days 23:59:59".format(
					datetime.date.today().day),
			help="When to stop gathering information")
	s.add_argument("constraint", nargs="*",
			help="Any additional JQL contraints")
	s.set_defaults(func=do_monthly)


	# create the parser for the "worklog" command
	s = subparsers.add_parser("worklog",
			help="Summarize worklog entries for analysis")
	s.add_argument("--since", default="now -2 months",
			help="When to gather information from")
	# worklog does not have any age filtering
	#s.add_argument("--until", default="tomorrow",
	#		help="When to stop gathering information")
	s.add_argument("constraint", nargs="*",
			help="Any additional JQL contraints")
	s.set_defaults(func=do_worklog)

	args = parser.parse_args(argv[1:])

	if 'constraint' in args:
		args.constraint = parse_constraint(args.constraint)
	if 'since' in args:
		args.since = parse_date(args.since)
	if 'until' in args:
		args.until = parse_date(args.until, end_of_day=True)

	args.func(args)

try:
	sys.exit(main(sys.argv))
except Error as e:
	print(e)
except KeyboardInterrupt:
	sys.exit(1)
sys.exit(127)

