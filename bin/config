#!/bin/bash

#
# config
#
# Small wrapper around Linux' scripts/config
#

unset args
unset manual

# Automatically locate the config script
[ -e scripts/config ] && config=scripts/config
[ -e ../scripts/config ] && config=../scripts/config
if [ -z $config ]
then
	echo "ERROR: Can't find scripts/config" >&2
	exit 1
fi

# Additional argument processing (over and above what scripts/config
# normally provides) to simplify automation. This logic is *not* whitespace
# safe but that OK because the underlying script doesn't require whitespace
# in its arguments.
for arg in "$@"
do
	case "$arg" in
	# kgdb/kdb and debug info
	kgdb|--kgdb)
		args="$args --enable DEBUG_INFO --enable MAGIC_SYSRQ --enable MAGIC_SYSRQ_BREAK_EMULATION --enable KGDB --enable KGDB_KDB"
		;;

	# udev, systemd
	modernize|--modernize)
		args="$args --enable TMPFS --enable DEVTMPFS --enable CGROUPS --module AUTOFS4_FS --module IPV6"
		;;

	# Native language support (needed to mount various FAT
	# filesystems)
	nls|--nls)
		args="$args --enable NLS_CODEPAGE_437"
		args="$args --enable NLS_CODEPAGE_737"
		args="$args --enable NLS_CODEPAGE_775"
		args="$args --enable NLS_CODEPAGE_850"
		args="$args --enable NLS_CODEPAGE_852"
		args="$args --enable NLS_CODEPAGE_855"
		args="$args --enable NLS_CODEPAGE_857"
		args="$args --enable NLS_CODEPAGE_860"
		args="$args --enable NLS_CODEPAGE_861"
		args="$args --enable NLS_CODEPAGE_862"
		args="$args --enable NLS_CODEPAGE_863"
		args="$args --enable NLS_CODEPAGE_864"
		args="$args --enable NLS_CODEPAGE_865"
		args="$args --enable NLS_CODEPAGE_866"
		args="$args --enable NLS_CODEPAGE_869"
		args="$args --enable NLS_CODEPAGE_936"
		args="$args --enable NLS_CODEPAGE_950"
		args="$args --enable NLS_CODEPAGE_932"
		args="$args --enable NLS_CODEPAGE_949"
		args="$args --enable NLS_CODEPAGE_874"
		args="$args --enable NLS_ISO8859_8"
		args="$args --enable NLS_CODEPAGE_1250"
		args="$args --enable NLS_CODEPAGE_1251"
		args="$args --enable NLS_ASCII"
		args="$args --enable NLS_ISO8859_1"
		args="$args --enable NLS_ISO8859_2"
		args="$args --enable NLS_ISO8859_3"
		args="$args --enable NLS_ISO8859_4"
		args="$args --enable NLS_ISO8859_5"
		args="$args --enable NLS_ISO8859_6"
		args="$args --enable NLS_ISO8859_7"
		args="$args --enable NLS_ISO8859_9"
		args="$args --enable NLS_ISO8859_13"
		args="$args --enable NLS_ISO8859_14"
		args="$args --enable NLS_ISO8859_15"
		args="$args --enable NLS_KOI8_R"
		args="$args --enable NLS_KOI8_U"
		args="$args --enable NLS_MAC_ROMAN"
		args="$args --enable NLS_MAC_CELTIC"
		args="$args --enable NLS_MAC_CENTEURO"
		args="$args --enable NLS_MAC_CROATIAN"
		args="$args --enable NLS_MAC_CYRILLIC"
		args="$args --enable NLS_MAC_GAELIC"
		args="$args --enable NLS_MAC_GREEK"
		args="$args --enable NLS_MAC_ICELAND"
		args="$args --enable NLS_MAC_INUIT"
		args="$args --enable NLS_MAC_ROMANIAN"
		args="$args --enable NLS_MAC_TURKISH"
		args="$args --enable NLS_UTF8"
		;;

	# IP auto configuration (for NFS root)
	nfs|--nfs)
		args="$args --enable IP_PNP --enable IP_PNP_DHCP"
		;;

	# Lots of lock debugging logic
	pedantic|--pedantic)
		# Debug Lockups and Hangs
		args="$args --enable LOCKUP_DETECTOR"
		args="$args --enable DETECT_HUNG_TASK"

		# Lock Debugging
		args="$args --enable DEBUG_RT_MUTEXES"
		args="$args --enable DEBUG_SPINLOCK"
		args="$args --enable DEBUG_MUTEXES"
		args="$args --enable DEBUG_WW_MUTEX_SLOWPATH"
		args="$args --enable DEBUG_LOCK_ALLOC"
		#args="$args --enable PROVE_LOCKING"
		args="$args --enable LOCK_STAT"
		args="$args --enable DEBUG_ATOMIC_SLEEP"
		;;

	# Enable Thumb2, disable broken architectures
	thumb|--thumb|thumb2|--thumb2)
		# Enable thumb
		args="$args --enable THUMB2_KERNEL"

		# Disable ARCH_MVEBU and ARCH_BERLIN
		# (arch/arm/kernel/pj4-cp0.c has non-thumb instructions)
		args="$args --disable ARCH_MVEBU --disable ARCH_BERLIN"

		# Disable IWMMXT
		args="$args --disable IWMMXT"
		;;

	manual|--manual)
		manual=1
		;;

	*defconfig)
		echo make $arg
		make $arg
		;;

	*)
		args="$args $arg"
		;;
	esac
done

# Launch the config commands and accept defaults for the new options
if  [ ! -z "$args" ]
then
	echo scripts/config $args
	/home/drt/Development/Kernel/linux/scripts/config $args
fi

if [ $? -eq 0 ] && [ -z $manual ]
then
	echo make olddefconfig
	make olddefconfig
fi
