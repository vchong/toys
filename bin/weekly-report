#!/usr/bin/env python

#
# weekly-report
#
# Extract JIRA status to generate a template weekly report.
#
 
from __future__ import print_function
import datetime
from jira.client import JIRA
import keyring
import re
import textwrap
import sys

hacks = (
	('CARD:', ''),
	('BLUEPRINT:', ''),
	('backport feature', 'backport'),
	('found in 3.18 LSK to the', 'to'),
	('Prepare presentation', 'Presentation'),
	('and its relationship to', 'and'),
	('for u-boot/linux for', 'for'),
	('Execute initial test plan ltp-ddt test cases to LAVA for BBB',
		'LTP-DDT: Initial LAVA integration (using BBB)')
)

def warn(issue, msg):
	lines = textwrap.wrap('{} {}'.format(issue.url, msg),
			initial_indent=   'WARNING: ',
			subsequent_indent='         ')
	print('\n'.join(lines))

# Connect to the server
server = 'https://cards.linaro.org'
username = 'daniel.thompson@linaro.org'
# To store the password, run this from an interactive python session
# import keyring; keyring.set_password(server, username, "mysecret")
password = keyring.get_password(server, username)
jira = JIRA(options={'server': server}, basic_auth=(username, password))

# Collect the date we must summarize
query = 'project = "Premium Services" AND (statusCategory != Complete OR updatedDate >= -7d)'
all = jira.search_issues(query)

# Grab each cards and sift them into blueprints and cards
cards = {}
blueprints = {}
for id in all:
	issue = jira.issue(id)

	# Massage the summary
	issue.summary = issue.fields.summary
	for (old, new) in hacks:
		issue.summary = issue.summary.replace(old, new)
	issue.summary = issue.summary.strip()
	issue.url = 'https://cards.linaro.org/browse/' + issue.key

	if issue.fields.issuetype.name == 'Blueprint':
		blueprints[issue.key] = issue
	elif issue.fields.issuetype.name == 'Engineering card':
		cards[issue.key] = issue
	else:
		warn(issue, 'has unexpected issuetype {}'.format(
				issue.fields.issuetype.name))

# Iterate of the cards and organise them by member
members = {}
for c in cards.itervalues():
	if len(c.fields.components) == 0:
		warn(c, 'has no component')
	for m in c.fields.components:
		if m.name not in members:
			members[m.name] = []
		members[m.name].append(c)
	c.assignees = set((c.fields.assignee.displayName,))
	c.blueprints = []

# Iterate over the blueprints and link them to their cards
for b in blueprints.itervalues():
	parent = b.fields.customfield_10301
	if parent == None:
		warn(b, 'is not linked to an EPIC')
		continue
	elif parent not in cards:
		warn(b, 'is linked to non-existant {}'.format(parent))
		continue
	
	card = cards[parent]
	card.assignees.add(b.fields.assignee.displayName)
	card.blueprints.append(b)

def cmp_key(x, y):
	return cmp(x.key, y.key)

def fmt_assignees(assignees):
	msg = ""
	for a in sorted(assignees):
		msg += ", {}".format(a.partition(' ')[0])
	return msg.lstrip(', ')

re_ymd = re.compile('(20[0-9][0-9]).([0-9][0-9]).([0-9][0-9])')

def fmt_engineering_status(issue):
	def is_current(ln):
		if len(ln) == 0:
			return False

		match = re.search(re_ymd, ln)
		if match:
			try:
				tstamp = datetime.datetime(
						int(match.group(1)),
						int(match.group(2)),
						int(match.group(3)))
				age = tstamp.now() - tstamp
				if age.days > 8:
					return False
				return True
			except ValueError:
				warn(issue, 'contains bad date ({})'.format(
					match.group(0)))
	
		warn(issue, 'has missing date in engineering status')
		return True

	es = issue.fields.customfield_10204
	if es == None:
		return ()

	es = es.replace('\r', '')
	es = es.split('\n')
	es = [ln for ln in es if is_current(ln)]

	return es

def categorize(issue):
	lookup = {
		'Open': (),
		'TODO': ('Plan',),
		'In Progress' : ('Plan', 'Progress'),
		'Resolved' : ('Progress',),
		'Closed' : ('Progress',),
	}

	if issue.fields.status.name in lookup:
		return set(lookup[issue.fields.status.name])

	warn(issue, 'has bad status ({})'.format(issue.fields.status.name))
	return set()

card_wrapper = textwrap.TextWrapper(
		initial_indent=' * ',
		subsequent_indent='   ')
bp_wrapper = textwrap.TextWrapper(
		initial_indent='   - ',
		subsequent_indent='     ')

# Construct the weekly report skeleton

print('## Progress')
for member in sorted(members.iterkeys()):
	for card in sorted(members[member], cmp_key):
		print('\n' + '\n'.join(
			card_wrapper.wrap('{}: {} [{}] ({})'.format(
				member, card.summary, 
				fmt_assignees(card.assignees), card.key))))
		for ln in fmt_engineering_status(card):
			print('\n'.join(bp_wrapper.wrap(ln)))
		for bp in sorted(card.blueprints, cmp_key):
			if 'Progress' in categorize(bp):
				print('\n'.join(bp_wrapper.wrap(bp.summary)))

print('\n## Plans')

for member in sorted(members.iterkeys()):
	for card in sorted(members[member], cmp_key):
		print('\n' + '\n'.join(
			card_wrapper.wrap('{}: {} [{}] ({})'.format(
				member, card.summary, 
				fmt_assignees(card.assignees), card.key))))
		for bp in sorted(card.blueprints, cmp_key):
			if 'Plan' in categorize(bp):
				print('\n'.join(bp_wrapper.wrap(bp.summary)))
